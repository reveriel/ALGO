# normal merge sort
g++ m.cpp -Dn=1000000 -pg
0.20, 0.19, 0.18, 0.16, 0.20
average: 0.186

g++ m.cpp -Dn=10000000 -pg
2.09, 2.20, 2.12, 2.15, 2.13
average: 2.132

# c of O(nlgn)
In [3]: 0.186 / (1000000*math.log2(1000000))
Out[3]: 9.331929865583418e-09

In [4]: 2.132 / (10000000*math.log2(10000000))
Out[4]: 9.168513582222972e-09

In [1]: (9.331929865583418e-09 +  9.168513582222972e-09) / 2
Out[1]: 9.250221723903195e-09

# refined merge sort
g++ m.cpp -Dn=1000000 -pg
0.10, 0.07, 0.10, 0.10, 0.12
average: 0.098

g++ m.cpp -Dn=10000000 -pg
1.37, 1.29, 1.27, 1.28, 1.23
average: 1.288

In [5]: 0.098 / (1000000*math.log2(1000000))
Out[5]: 4.9168232625116934e-09

In [6]: 1.288 / (10000000*math.log2(10000000))
Out[6]: 5.538951920217254e-09

# average of C
(4.9168232625116934e-09 +  5.538951920217254e-09) / 2
=> 5.227887591364474e-09

# save time
In [2]: ((0.186-0.098)/0.186 + (2.132-1.288)/2.132) /2
Out[2]: 0.4344953499162783


# normal insertion sort
g++ i.cpp -Dk=10000 -pg
0.25, 0.24, 0.24, 0.24, 0.26
average: 0.246

g++ i.cpp -Dk=100000 -pg
25.10, 25.11, 25.15, 25.31, 25.11
average: 25.156


# c of O(n^2)
In [1]: 0.246 / (10000**2)
Out[1]: 2.4599999999999998e-09

In [2]: 25.156 / (100000**2)
Out[2]: 2.5156e-09

# average of C
In [5]: ( 2.4599999999999998e-09 +  2.5156e-09)/2
Out[5]: 2.4877999999999996e-09

g++ i.cpp -Dk=10000 -pg -DR
0.17, 0.17, 0.17, 0.18, 0.17
average: 0.172

g++ i.cpp -Dk=100000 -pg -DR
18.09, 18.16, 18.11, 18.07, 18.06
average: 18.098

# c of O(n^2)
In [3]: 0.172 / (10000**2)
Out[3]: 1.7199999999999999e-09

In [4]: 18.098 / (100000**2)
Out[4]: 1.8097999999999999e-09

# average of C
In [6]: ( 1.7199999999999999e-09 + 1.8097999999999999e-09 )/2
Out[6]: 1.7649e-09

# save time
In [2]: ((0.246-0.172)/0.246 + (25.156-18.098)/25.156) / 2
Out[2]: 0.290691128011614



log2(n)/n =  1.7649e-09/  5.227887591364474e-09
solve n -> about 9.71762


# mix of isort and merge sort
g++ mi.cpp -DN=1000000 -pg
0.20, 0.25, 0.20, 0.18. 0.20
g++ mi.cpp -DN=10000000 -pg
2.52, 2.57, 2.30, 2.28, 2.30

結論：未必有變快 QQ
